
occlusion_detection_120.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00804000  00001138  000011cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00804058  00804058  00001224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041e5  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031b8  00000000  00000000  00005551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6a  00000000  00000000  00008709  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00009174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bdc  00000000  00000000  0000943c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a83  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000ba9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__ctors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      68:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_29>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ac:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      bc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      dc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ec:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      fc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     100:	07 63       	ori	r16, 0x37	; 55
     102:	42 36       	cpi	r20, 0x62	; 98
     104:	b7 9b       	sbis	0x16, 7	; 22
     106:	d8 a7       	std	Y+40, r29	; 0x28
     108:	1a 39       	cpi	r17, 0x9A	; 154
     10a:	68 56       	subi	r22, 0x68	; 104
     10c:	18 ae       	std	Y+56, r1	; 0x38
     10e:	ba ab       	std	Y+50, r27	; 0x32
     110:	55 8c       	ldd	r5, Z+29	; 0x1d
     112:	1d 3c       	cpi	r17, 0xCD	; 205
     114:	b7 cc       	rjmp	.-1682   	; 0xfffffa84 <__eeprom_end+0xff7efa84>
     116:	57 63       	ori	r21, 0x37	; 55
     118:	bd 6d       	ori	r27, 0xDD	; 221
     11a:	ed fd       	.word	0xfded	; ????
     11c:	75 3e       	cpi	r23, 0xE5	; 229
     11e:	f6 17       	cp	r31, r22
     120:	72 31       	cpi	r23, 0x12	; 18
     122:	bf 00       	.word	0x00bf	; ????
     124:	00 00       	nop
     126:	80 3f       	cpi	r24, 0xF0	; 240
     128:	08 00       	.word	0x0008	; ????
     12a:	00 00       	nop
     12c:	be 92       	st	-X, r11
     12e:	24 49       	sbci	r18, 0x94	; 148
     130:	12 3e       	cpi	r17, 0xE2	; 226
     132:	ab aa       	std	Y+51, r10	; 0x33
     134:	aa 2a       	or	r10, r26
     136:	be cd       	rjmp	.-1156   	; 0xfffffcb4 <__eeprom_end+0xff7efcb4>
     138:	cc cc       	rjmp	.-1640   	; 0xfffffad2 <__eeprom_end+0xff7efad2>
     13a:	4c 3e       	cpi	r20, 0xEC	; 236
     13c:	00 00       	nop
     13e:	00 80       	ld	r0, Z
     140:	be ab       	std	Y+54, r27	; 0x36
     142:	aa aa       	std	Y+50, r10	; 0x32
     144:	aa 3e       	cpi	r26, 0xEA	; 234
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	bf 00       	.word	0x00bf	; ????
     14c:	00 00       	nop
     14e:	80 3f       	cpi	r24, 0xF0	; 240
     150:	00 00       	nop
     152:	00 00       	nop
     154:	00 08       	sbc	r0, r0
     156:	41 78       	andi	r20, 0x81	; 129
     158:	d3 bb       	out	0x13, r29	; 19
     15a:	43 87       	std	Z+11, r20	; 0x0b
     15c:	d1 13       	cpse	r29, r17
     15e:	3d 19       	sub	r19, r13
     160:	0e 3c       	cpi	r16, 0xCE	; 206
     162:	c3 bd       	out	0x23, r28	; 35
     164:	42 82       	std	Z+2, r4	; 0x02
     166:	ad 2b       	or	r26, r29
     168:	3e 68       	ori	r19, 0x8E	; 142
     16a:	ec 82       	std	Y+4, r14	; 0x04
     16c:	76 be       	out	0x36, r7	; 54
     16e:	d9 8f       	std	Y+25, r29	; 0x19
     170:	e1 a9       	ldd	r30, Z+49	; 0x31
     172:	3e 4c       	sbci	r19, 0xCE	; 206
     174:	80 ef       	ldi	r24, 0xF0	; 240
     176:	ff be       	out	0x3f, r15	; 63
     178:	01 c4       	rjmp	.+2050   	; 0x97c <__addsf3x+0x20>
     17a:	ff 7f       	andi	r31, 0xFF	; 255
     17c:	3f 00       	.word	0x003f	; ????
     17e:	00 00       	nop
	...

00000182 <__ctors_end>:
     182:	11 24       	eor	r1, r1
     184:	1f be       	out	0x3f, r1	; 63
     186:	cf ef       	ldi	r28, 0xFF	; 255
     188:	cd bf       	out	0x3d, r28	; 61
     18a:	df e7       	ldi	r29, 0x7F	; 127
     18c:	de bf       	out	0x3e, r29	; 62

0000018e <__do_copy_data>:
     18e:	10 e4       	ldi	r17, 0x40	; 64
     190:	a0 e0       	ldi	r26, 0x00	; 0
     192:	b0 e4       	ldi	r27, 0x40	; 64
     194:	e8 e3       	ldi	r30, 0x38	; 56
     196:	f1 e1       	ldi	r31, 0x11	; 17
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	0b bf       	out	0x3b, r16	; 59
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <__do_copy_data+0x14>
     19e:	07 90       	elpm	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	a8 35       	cpi	r26, 0x58	; 88
     1a4:	b1 07       	cpc	r27, r17
     1a6:	d9 f7       	brne	.-10     	; 0x19e <__do_copy_data+0x10>

000001a8 <__do_clear_bss>:
     1a8:	20 e4       	ldi	r18, 0x40	; 64
     1aa:	a8 e5       	ldi	r26, 0x58	; 88
     1ac:	b0 e4       	ldi	r27, 0x40	; 64
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <.do_clear_bss_start>

000001b0 <.do_clear_bss_loop>:
     1b0:	1d 92       	st	X+, r1

000001b2 <.do_clear_bss_start>:
     1b2:	a4 3a       	cpi	r26, 0xA4	; 164
     1b4:	b2 07       	cpc	r27, r18
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <.do_clear_bss_loop>
     1b8:	0e 94 76 04 	call	0x8ec	; 0x8ec <main>
     1bc:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <_exit>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <reverse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c4:	61 50       	subi	r22, 0x01	; 1
     1c6:	71 09       	sbc	r23, r1
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	0e c0       	rjmp	.+28     	; 0x1ea <reverse+0x26>
     1ce:	dc 01       	movw	r26, r24
     1d0:	a2 0f       	add	r26, r18
     1d2:	b3 1f       	adc	r27, r19
     1d4:	4c 91       	ld	r20, X
     1d6:	fc 01       	movw	r30, r24
     1d8:	e6 0f       	add	r30, r22
     1da:	f7 1f       	adc	r31, r23
     1dc:	50 81       	ld	r21, Z
     1de:	5c 93       	st	X, r21
     1e0:	40 83       	st	Z, r20
     1e2:	2f 5f       	subi	r18, 0xFF	; 255
     1e4:	3f 4f       	sbci	r19, 0xFF	; 255
     1e6:	61 50       	subi	r22, 0x01	; 1
     1e8:	71 09       	sbc	r23, r1
     1ea:	26 17       	cp	r18, r22
     1ec:	37 07       	cpc	r19, r23
     1ee:	7c f3       	brlt	.-34     	; 0x1ce <reverse+0xa>
     1f0:	08 95       	ret

000001f2 <intToStr>:
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	8a 01       	movw	r16, r20
     204:	69 01       	movw	r12, r18
     206:	c0 e0       	ldi	r28, 0x00	; 0
     208:	d0 e0       	ldi	r29, 0x00	; 0
     20a:	11 c0       	rjmp	.+34     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
     20c:	78 01       	movw	r14, r16
     20e:	ec 0e       	add	r14, r28
     210:	fd 1e       	adc	r15, r29
     212:	2a e0       	ldi	r18, 0x0A	; 10
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__divmodsi4>
     21e:	60 5d       	subi	r22, 0xD0	; 208
     220:	f7 01       	movw	r30, r14
     222:	60 83       	st	Z, r22
     224:	62 2f       	mov	r22, r18
     226:	73 2f       	mov	r23, r19
     228:	84 2f       	mov	r24, r20
     22a:	95 2f       	mov	r25, r21
     22c:	21 96       	adiw	r28, 0x01	; 1
     22e:	61 15       	cp	r22, r1
     230:	71 05       	cpc	r23, r1
     232:	81 05       	cpc	r24, r1
     234:	91 05       	cpc	r25, r1
     236:	51 f7       	brne	.-44     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
     238:	06 c0       	rjmp	.+12     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
     23a:	f8 01       	movw	r30, r16
     23c:	ec 0f       	add	r30, r28
     23e:	fd 1f       	adc	r31, r29
     240:	80 e3       	ldi	r24, 0x30	; 48
     242:	80 83       	st	Z, r24
     244:	21 96       	adiw	r28, 0x01	; 1
     246:	cc 15       	cp	r28, r12
     248:	dd 05       	cpc	r29, r13
     24a:	bc f3       	brlt	.-18     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
     24c:	be 01       	movw	r22, r28
     24e:	c8 01       	movw	r24, r16
     250:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <reverse>
     254:	f8 01       	movw	r30, r16
     256:	ec 0f       	add	r30, r28
     258:	fd 1f       	adc	r31, r29
     25a:	10 82       	st	Z, r1
     25c:	ce 01       	movw	r24, r28
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	df 90       	pop	r13
     26c:	cf 90       	pop	r12
     26e:	08 95       	ret

00000270 <ftoa>:
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	4b 01       	movw	r8, r22
     28a:	5c 01       	movw	r10, r24
     28c:	8a 01       	movw	r16, r20
     28e:	e9 01       	movw	r28, r18
     290:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixsfsi>
     294:	6b 01       	movw	r12, r22
     296:	77 0f       	add	r23, r23
     298:	ee 08       	sbc	r14, r14
     29a:	ff 08       	sbc	r15, r15
     29c:	c7 01       	movw	r24, r14
     29e:	b6 01       	movw	r22, r12
     2a0:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
     2a4:	9b 01       	movw	r18, r22
     2a6:	ac 01       	movw	r20, r24
     2a8:	c5 01       	movw	r24, r10
     2aa:	b4 01       	movw	r22, r8
     2ac:	0e 94 96 04 	call	0x92c	; 0x92c <__subsf3>
     2b0:	4b 01       	movw	r8, r22
     2b2:	5c 01       	movw	r10, r24
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	a8 01       	movw	r20, r16
     2ba:	c7 01       	movw	r24, r14
     2bc:	b6 01       	movw	r22, r12
     2be:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <intToStr>
     2c2:	7c 01       	movw	r14, r24
     2c4:	20 97       	sbiw	r28, 0x00	; 0
     2c6:	49 f1       	breq	.+82     	; 0x31a <ftoa+0xaa>
     2c8:	f8 01       	movw	r30, r16
     2ca:	e8 0f       	add	r30, r24
     2cc:	f9 1f       	adc	r31, r25
     2ce:	8e e2       	ldi	r24, 0x2E	; 46
     2d0:	80 83       	st	Z, r24
     2d2:	be 01       	movw	r22, r28
     2d4:	0d 2e       	mov	r0, r29
     2d6:	00 0c       	add	r0, r0
     2d8:	88 0b       	sbc	r24, r24
     2da:	99 0b       	sbc	r25, r25
     2dc:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
     2e0:	9b 01       	movw	r18, r22
     2e2:	ac 01       	movw	r20, r24
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 e2       	ldi	r24, 0x20	; 32
     2ea:	91 e4       	ldi	r25, 0x41	; 65
     2ec:	0e 94 d4 06 	call	0xda8	; 0xda8 <pow>
     2f0:	9b 01       	movw	r18, r22
     2f2:	ac 01       	movw	r20, r24
     2f4:	c5 01       	movw	r24, r10
     2f6:	b4 01       	movw	r22, r8
     2f8:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     2fc:	2f ef       	ldi	r18, 0xFF	; 255
     2fe:	e2 1a       	sub	r14, r18
     300:	f2 0a       	sbc	r15, r18
     302:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixsfsi>
     306:	a8 01       	movw	r20, r16
     308:	4e 0d       	add	r20, r14
     30a:	5f 1d       	adc	r21, r15
     30c:	07 2e       	mov	r0, r23
     30e:	00 0c       	add	r0, r0
     310:	88 0b       	sbc	r24, r24
     312:	99 0b       	sbc	r25, r25
     314:	9e 01       	movw	r18, r28
     316:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <intToStr>
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	bf 90       	pop	r11
     32c:	af 90       	pop	r10
     32e:	9f 90       	pop	r9
     330:	8f 90       	pop	r8
     332:	08 95       	ret

00000334 <USART1_init>:
     334:	e0 e4       	ldi	r30, 0x40	; 64
     336:	f4 e0       	ldi	r31, 0x04	; 4
     338:	20 81       	ld	r18, Z
     33a:	2d 7f       	andi	r18, 0xFD	; 253
     33c:	20 83       	st	Z, r18
     33e:	20 81       	ld	r18, Z
     340:	21 60       	ori	r18, 0x01	; 1
     342:	20 83       	st	Z, r18
     344:	bc 01       	movw	r22, r24
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatunsisf>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	40 e8       	ldi	r20, 0x80	; 128
     354:	51 e4       	ldi	r21, 0x41	; 65
     356:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	74 e2       	ldi	r23, 0x24	; 36
     362:	84 e7       	ldi	r24, 0x74	; 116
     364:	9d e4       	ldi	r25, 0x4D	; 77
     366:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	5f e3       	ldi	r21, 0x3F	; 63
     372:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     376:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
     37a:	e0 e2       	ldi	r30, 0x20	; 32
     37c:	f8 e0       	ldi	r31, 0x08	; 8
     37e:	60 87       	std	Z+8, r22	; 0x08
     380:	71 87       	std	Z+9, r23	; 0x09
     382:	86 81       	ldd	r24, Z+6	; 0x06
     384:	80 6c       	ori	r24, 0xC0	; 192
     386:	86 83       	std	Z+6, r24	; 0x06
     388:	08 95       	ret

0000038a <USART1_sendChar>:
     38a:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7e0824>
     38e:	95 ff       	sbrs	r25, 5
     390:	fc cf       	rjmp	.-8      	; 0x38a <USART1_sendChar>
     392:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     396:	08 95       	ret

00000398 <USART1_sendString>:
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	8c 01       	movw	r16, r24
     3a2:	c0 e0       	ldi	r28, 0x00	; 0
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <USART1_sendString+0x1e>
     3a8:	f8 01       	movw	r30, r16
     3aa:	ec 0f       	add	r30, r28
     3ac:	fd 1f       	adc	r31, r29
     3ae:	80 81       	ld	r24, Z
     3b0:	0e 94 c5 01 	call	0x38a	; 0x38a <USART1_sendChar>
     3b4:	21 96       	adiw	r28, 0x01	; 1
     3b6:	f8 01       	movw	r30, r16
     3b8:	01 90       	ld	r0, Z+
     3ba:	00 20       	and	r0, r0
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <USART1_sendString+0x20>
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	e0 1b       	sub	r30, r16
     3c2:	f1 0b       	sbc	r31, r17
     3c4:	ce 17       	cp	r28, r30
     3c6:	df 07       	cpc	r29, r31
     3c8:	78 f3       	brcs	.-34     	; 0x3a8 <USART1_sendString+0x10>
     3ca:	8a e0       	ldi	r24, 0x0A	; 10
     3cc:	0e 94 c5 01 	call	0x38a	; 0x38a <USART1_sendChar>
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <USART1_sendInt>:
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 e7       	ldi	r20, 0x70	; 112
     3e0:	50 e4       	ldi	r21, 0x40	; 64
     3e2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <intToStr>
     3e6:	80 e7       	ldi	r24, 0x70	; 112
     3e8:	90 e4       	ldi	r25, 0x40	; 64
     3ea:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
     3ee:	08 95       	ret

000003f0 <USART1_sendFloat>:
     3f0:	9a 01       	movw	r18, r20
     3f2:	40 e7       	ldi	r20, 0x70	; 112
     3f4:	50 e4       	ldi	r21, 0x40	; 64
     3f6:	0e 94 38 01 	call	0x270	; 0x270 <ftoa>
     3fa:	80 e7       	ldi	r24, 0x70	; 112
     3fc:	90 e4       	ldi	r25, 0x40	; 64
     3fe:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
     402:	08 95       	ret

00000404 <ADC0_init>:
     404:	85 e8       	ldi	r24, 0x85	; 133
     406:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     40a:	e0 e0       	ldi	r30, 0x00	; 0
     40c:	f6 e0       	ldi	r31, 0x06	; 6
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	82 83       	std	Z+2, r24	; 0x02
     412:	80 83       	st	Z, r24
     414:	08 95       	ret

00000416 <ADC0_start>:
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
     41c:	08 95       	ret

0000041e <ADC0_read>:
     41e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     422:	0e 94 0b 02 	call	0x416	; 0x416 <ADC0_start>
     426:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
     42a:	80 ff       	sbrs	r24, 0
     42c:	fc cf       	rjmp	.-8      	; 0x426 <ADC0_read+0x8>
     42e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     432:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
     436:	08 95       	ret

00000438 <ReadCount>:
     438:	e0 e0       	ldi	r30, 0x00	; 0
     43a:	f4 e0       	ldi	r31, 0x04	; 4
     43c:	84 81       	ldd	r24, Z+4	; 0x04
     43e:	87 7f       	andi	r24, 0xF7	; 247
     440:	84 83       	std	Z+4, r24	; 0x04
     442:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7e0408>
     446:	82 fd       	sbrc	r24, 2
     448:	fc cf       	rjmp	.-8      	; 0x442 <ReadCount+0xa>
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	ba 01       	movw	r22, r20
     452:	1c c0       	rjmp	.+56     	; 0x48c <ReadCount+0x54>
     454:	e0 e0       	ldi	r30, 0x00	; 0
     456:	f4 e0       	ldi	r31, 0x04	; 4
     458:	84 81       	ldd	r24, Z+4	; 0x04
     45a:	88 60       	ori	r24, 0x08	; 8
     45c:	84 83       	std	Z+4, r24	; 0x04
     45e:	26 e0       	ldi	r18, 0x06	; 6
     460:	2a 95       	dec	r18
     462:	f1 f7       	brne	.-4      	; 0x460 <ReadCount+0x28>
     464:	00 c0       	rjmp	.+0      	; 0x466 <ReadCount+0x2e>
     466:	44 0f       	add	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	66 1f       	adc	r22, r22
     46c:	77 1f       	adc	r23, r23
     46e:	84 81       	ldd	r24, Z+4	; 0x04
     470:	87 7f       	andi	r24, 0xF7	; 247
     472:	84 83       	std	Z+4, r24	; 0x04
     474:	86 e0       	ldi	r24, 0x06	; 6
     476:	8a 95       	dec	r24
     478:	f1 f7       	brne	.-4      	; 0x476 <ReadCount+0x3e>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <ReadCount+0x44>
     47c:	80 85       	ldd	r24, Z+8	; 0x08
     47e:	82 ff       	sbrs	r24, 2
     480:	04 c0       	rjmp	.+8      	; 0x48a <ReadCount+0x52>
     482:	4f 5f       	subi	r20, 0xFF	; 255
     484:	5f 4f       	sbci	r21, 0xFF	; 255
     486:	6f 4f       	sbci	r22, 0xFF	; 255
     488:	7f 4f       	sbci	r23, 0xFF	; 255
     48a:	9f 5f       	subi	r25, 0xFF	; 255
     48c:	98 31       	cpi	r25, 0x18	; 24
     48e:	10 f3       	brcs	.-60     	; 0x454 <ReadCount+0x1c>
     490:	e0 e0       	ldi	r30, 0x00	; 0
     492:	f4 e0       	ldi	r31, 0x04	; 4
     494:	84 81       	ldd	r24, Z+4	; 0x04
     496:	88 60       	ori	r24, 0x08	; 8
     498:	84 83       	std	Z+4, r24	; 0x04
     49a:	cb 01       	movw	r24, r22
     49c:	ba 01       	movw	r22, r20
     49e:	80 58       	subi	r24, 0x80	; 128
     4a0:	24 81       	ldd	r18, Z+4	; 0x04
     4a2:	27 7f       	andi	r18, 0xF7	; 247
     4a4:	24 83       	std	Z+4, r18	; 0x04
     4a6:	08 95       	ret

000004a8 <syringeforward>:
     4a8:	e0 e8       	ldi	r30, 0x80	; 128
     4aa:	f4 e0       	ldi	r31, 0x04	; 4
     4ac:	84 81       	ldd	r24, Z+4	; 0x04
     4ae:	80 61       	ori	r24, 0x10	; 16
     4b0:	84 83       	std	Z+4, r24	; 0x04
     4b2:	87 ee       	ldi	r24, 0xE7	; 231
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <syringeforward+0xe>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <syringeforward+0x14>
     4bc:	00 00       	nop
     4be:	84 81       	ldd	r24, Z+4	; 0x04
     4c0:	8f 7e       	andi	r24, 0xEF	; 239
     4c2:	84 83       	std	Z+4, r24	; 0x04
     4c4:	87 ee       	ldi	r24, 0xE7	; 231
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <syringeforward+0x20>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <syringeforward+0x26>
     4ce:	00 00       	nop
     4d0:	08 95       	ret

000004d2 <ok_syringe>:
 }

 /*****************************syringe****************************************************************/

 void ok_syringe(void) //which syringe is detected 60ml,20ml
 {
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
	 for(int i=1; i<=10; i++)
     4de:	c1 e0       	ldi	r28, 0x01	; 1
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
     4e2:	20 c0       	rjmp	.+64     	; 0x524 <ok_syringe+0x52>
	 {
		 adc = ADC0_read(channel_3);
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	0e 94 0f 02 	call	0x41e	; 0x41e <ADC0_read>
     4ea:	80 93 a2 40 	sts	0x40A2, r24	; 0x8040a2 <adc>
     4ee:	90 93 a3 40 	sts	0x40A3, r25	; 0x8040a3 <adc+0x1>
		 sum=sum+adc;
     4f2:	bc 01       	movw	r22, r24
     4f4:	99 0f       	add	r25, r25
     4f6:	88 0b       	sbc	r24, r24
     4f8:	99 0b       	sbc	r25, r25
     4fa:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
     4fe:	20 91 6c 40 	lds	r18, 0x406C	; 0x80406c <sum>
     502:	30 91 6d 40 	lds	r19, 0x406D	; 0x80406d <sum+0x1>
     506:	40 91 6e 40 	lds	r20, 0x406E	; 0x80406e <sum+0x2>
     50a:	50 91 6f 40 	lds	r21, 0x406F	; 0x80406f <sum+0x3>
     50e:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     512:	60 93 6c 40 	sts	0x406C, r22	; 0x80406c <sum>
     516:	70 93 6d 40 	sts	0x406D, r23	; 0x80406d <sum+0x1>
     51a:	80 93 6e 40 	sts	0x406E, r24	; 0x80406e <sum+0x2>
     51e:	90 93 6f 40 	sts	0x406F, r25	; 0x80406f <sum+0x3>

 /*****************************syringe****************************************************************/

 void ok_syringe(void) //which syringe is detected 60ml,20ml
 {
	 for(int i=1; i<=10; i++)
     522:	21 96       	adiw	r28, 0x01	; 1
     524:	cb 30       	cpi	r28, 0x0B	; 11
     526:	d1 05       	cpc	r29, r1
     528:	ec f2       	brlt	.-70     	; 0x4e4 <ok_syringe+0x12>
	 {
		 adc = ADC0_read(channel_3);
		 sum=sum+adc;
	 }
	 sum = sum/10.00;
     52a:	60 91 6c 40 	lds	r22, 0x406C	; 0x80406c <sum>
     52e:	70 91 6d 40 	lds	r23, 0x406D	; 0x80406d <sum+0x1>
     532:	80 91 6e 40 	lds	r24, 0x406E	; 0x80406e <sum+0x2>
     536:	90 91 6f 40 	lds	r25, 0x406F	; 0x80406f <sum+0x3>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e2       	ldi	r20, 0x20	; 32
     540:	51 e4       	ldi	r21, 0x41	; 65
     542:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
     546:	60 93 6c 40 	sts	0x406C, r22	; 0x80406c <sum>
     54a:	70 93 6d 40 	sts	0x406D, r23	; 0x80406d <sum+0x1>
     54e:	80 93 6e 40 	sts	0x406E, r24	; 0x80406e <sum+0x2>
     552:	90 93 6f 40 	sts	0x406F, r25	; 0x80406f <sum+0x3>
	 syringe_dia = 0.00848527*(sum)+7.717863;
     556:	2d ec       	ldi	r18, 0xCD	; 205
     558:	35 e0       	ldi	r19, 0x05	; 5
     55a:	4b e0       	ldi	r20, 0x0B	; 11
     55c:	5c e3       	ldi	r21, 0x3C	; 60
     55e:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     562:	2c eb       	ldi	r18, 0xBC	; 188
     564:	38 ef       	ldi	r19, 0xF8	; 248
     566:	46 ef       	ldi	r20, 0xF6	; 246
     568:	50 e4       	ldi	r21, 0x40	; 64
     56a:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     56e:	6b 01       	movw	r12, r22
     570:	7c 01       	movw	r14, r24
     572:	60 93 68 40 	sts	0x4068, r22	; 0x804068 <syringe_dia>
     576:	70 93 69 40 	sts	0x4069, r23	; 0x804069 <syringe_dia+0x1>
     57a:	80 93 6a 40 	sts	0x406A, r24	; 0x80406a <syringe_dia+0x2>
     57e:	90 93 6b 40 	sts	0x406B, r25	; 0x80406b <syringe_dia+0x3>
	// USART1_sendFloat(syringe_dia, 2);
	 
	 if (syringe_dia > 29.0)
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	48 ee       	ldi	r20, 0xE8	; 232
     588:	51 e4       	ldi	r21, 0x41	; 65
     58a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__gesf2>
     58e:	18 16       	cp	r1, r24
     590:	5c f4       	brge	.+22     	; 0x5a8 <ok_syringe+0xd6>
	 {
// 		 USART1_sendString("60 ML detected\n");
// 		 syringe=60;
         USART1_sendString("20 ML detected\n");
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e4       	ldi	r25, 0x40	; 64
     596:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
     	 syringe=20;
     59a:	84 e1       	ldi	r24, 0x14	; 20
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	80 93 5e 40 	sts	0x405E, r24	; 0x80405e <syringe>
     5a2:	90 93 5f 40 	sts	0x405F, r25	; 0x80405f <syringe+0x1>
     5a6:	3e c0       	rjmp	.+124    	; 0x624 <ok_syringe+0x152>

	 }
	 else if (syringe_dia < 23.0 )
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	48 eb       	ldi	r20, 0xB8	; 184
     5ae:	51 e4       	ldi	r21, 0x41	; 65
     5b0:	c7 01       	movw	r24, r14
     5b2:	b6 01       	movw	r22, r12
     5b4:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
     5b8:	88 23       	and	r24, r24
     5ba:	5c f4       	brge	.+22     	; 0x5d2 <ok_syringe+0x100>
	 {
		 USART1_sendString("20 ML detected\n");
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e4       	ldi	r25, 0x40	; 64
     5c0:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
		 syringe=20;
     5c4:	84 e1       	ldi	r24, 0x14	; 20
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	80 93 5e 40 	sts	0x405E, r24	; 0x80405e <syringe>
     5cc:	90 93 5f 40 	sts	0x405F, r25	; 0x80405f <syringe+0x1>
     5d0:	29 c0       	rjmp	.+82     	; 0x624 <ok_syringe+0x152>
	 }
	 else if (syringe_dia < 17.0)
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	48 e8       	ldi	r20, 0x88	; 136
     5d8:	51 e4       	ldi	r21, 0x41	; 65
     5da:	c7 01       	movw	r24, r14
     5dc:	b6 01       	movw	r22, r12
     5de:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
     5e2:	88 23       	and	r24, r24
     5e4:	5c f4       	brge	.+22     	; 0x5fc <ok_syringe+0x12a>
	 {
		 USART1_sendString("10 Ml detected\n");
     5e6:	80 e1       	ldi	r24, 0x10	; 16
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
		 syringe=10;
     5ee:	8a e0       	ldi	r24, 0x0A	; 10
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	80 93 5e 40 	sts	0x405E, r24	; 0x80405e <syringe>
     5f6:	90 93 5f 40 	sts	0x405F, r25	; 0x80405f <syringe+0x1>
     5fa:	14 c0       	rjmp	.+40     	; 0x624 <ok_syringe+0x152>
	 }
	 else if( syringe_dia < 12.6)
     5fc:	2a e9       	ldi	r18, 0x9A	; 154
     5fe:	39 e9       	ldi	r19, 0x99	; 153
     600:	49 e4       	ldi	r20, 0x49	; 73
     602:	51 e4       	ldi	r21, 0x41	; 65
     604:	c7 01       	movw	r24, r14
     606:	b6 01       	movw	r22, r12
     608:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
     60c:	88 23       	and	r24, r24
     60e:	54 f4       	brge	.+20     	; 0x624 <ok_syringe+0x152>
	 {
		 USART1_sendString("5 Ml detected\n");
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	90 e4       	ldi	r25, 0x40	; 64
     614:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
		 syringe=5;
     618:	85 e0       	ldi	r24, 0x05	; 5
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	80 93 5e 40 	sts	0x405E, r24	; 0x80405e <syringe>
     620:	90 93 5f 40 	sts	0x405F, r25	; 0x80405f <syringe+0x1>
	 }
 }
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	df 90       	pop	r13
     62e:	cf 90       	pop	r12
     630:	08 95       	ret

00000632 <__vector_29>:

 /*********************************************************************************************/

 ISR(PORTC_PORT_vect)
 {
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	0b b6       	in	r0, 0x3b	; 59
     63e:	0f 92       	push	r0
     640:	2f 93       	push	r18
     642:	3f 93       	push	r19
     644:	4f 93       	push	r20
     646:	5f 93       	push	r21
     648:	6f 93       	push	r22
     64a:	7f 93       	push	r23
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	af 93       	push	r26
     652:	bf 93       	push	r27
     654:	ef 93       	push	r30
     656:	ff 93       	push	r31
	 if(PORTC.INTFLAGS & (1 << 7))
     658:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
     65c:	88 23       	and	r24, r24
     65e:	ac f4       	brge	.+42     	; 0x68a <__vector_29+0x58>
	 {
		 if (syringe_detected)
     660:	80 91 59 40 	lds	r24, 0x4059	; 0x804059 <syringe_detected>
     664:	88 23       	and	r24, r24
     666:	39 f0       	breq	.+14     	; 0x676 <__vector_29+0x44>
		 {
			 syringe_detected = false;
     668:	10 92 59 40 	sts	0x4059, r1	; 0x804059 <syringe_detected>
			 USART1_sendString("Waiting for Syringe\n");
     66c:	8f e2       	ldi	r24, 0x2F	; 47
     66e:	90 e4       	ldi	r25, 0x40	; 64
     670:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
     674:	05 c0       	rjmp	.+10     	; 0x680 <__vector_29+0x4e>
		 }
		 else
		 {
			 syringe_detected = true;        //flag for Syringe button
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	80 93 59 40 	sts	0x4059, r24	; 0x804059 <syringe_detected>
			 run_ok_syringe=true;
     67c:	80 93 58 40 	sts	0x4058, r24	; 0x804058 <__data_end>
		 }
		 PORTC.INTFLAGS |= (1<<7);
     680:	e0 e4       	ldi	r30, 0x40	; 64
     682:	f4 e0       	ldi	r31, 0x04	; 4
     684:	81 85       	ldd	r24, Z+9	; 0x09
     686:	80 68       	ori	r24, 0x80	; 128
     688:	81 87       	std	Z+9, r24	; 0x09
		 
	 }
 }
     68a:	ff 91       	pop	r31
     68c:	ef 91       	pop	r30
     68e:	bf 91       	pop	r27
     690:	af 91       	pop	r26
     692:	9f 91       	pop	r25
     694:	8f 91       	pop	r24
     696:	7f 91       	pop	r23
     698:	6f 91       	pop	r22
     69a:	5f 91       	pop	r21
     69c:	4f 91       	pop	r20
     69e:	3f 91       	pop	r19
     6a0:	2f 91       	pop	r18
     6a2:	0f 90       	pop	r0
     6a4:	0b be       	out	0x3b, r0	; 59
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <syringe_check_init>:

 /****************************syringe check init*******************************************************/

 void syringe_check_init(void)
 {
	 if(!(PORTC.IN & PIN7_bm))
     6b0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7e0448>
     6b4:	88 23       	and	r24, r24
     6b6:	1c f0       	brlt	.+6      	; 0x6be <syringe_check_init+0xe>
	 {
		 syringe_detected = false;
     6b8:	10 92 59 40 	sts	0x4059, r1	; 0x804059 <syringe_detected>
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <syringe_check_init+0x1c>
	 }
	 else if ((PORTC.IN & PIN7_bm))
     6be:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7e0448>
     6c2:	88 23       	and	r24, r24
     6c4:	1c f4       	brge	.+6      	; 0x6cc <syringe_check_init+0x1c>
	 {
		 syringe_detected = true;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 59 40 	sts	0x4059, r24	; 0x804059 <syringe_detected>
	 }
	 USART1_sendInt(syringe_detected);
     6cc:	60 91 59 40 	lds	r22, 0x4059	; 0x804059 <syringe_detected>
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 ed 01 	call	0x3da	; 0x3da <USART1_sendInt>
     6da:	08 95       	ret

000006dc <gpio_init>:

 /******************************gpio init*****************************************************/
 void gpio_init(void) 
 {
	 /*PORTA.DIR |= PIN4_bm | PIN6_bm; // Set the direction PIN4,PIN5,PIN6*/
	 PORTA.DIR &= ~(1 << 2); //DT AS INPUT
     6dc:	e0 e0       	ldi	r30, 0x00	; 0
     6de:	f4 e0       	ldi	r31, 0x04	; 4
     6e0:	80 81       	ld	r24, Z
     6e2:	8b 7f       	andi	r24, 0xFB	; 251
     6e4:	80 83       	st	Z, r24
	 PORTA.DIR |= (1 << 3);  // SCK AS OUTPUT
     6e6:	80 81       	ld	r24, Z
     6e8:	88 60       	ori	r24, 0x08	; 8
     6ea:	80 83       	st	Z, r24
	 PORTE.DIR |= (1<<4) | (1<<5); //Set step and Dir pin
     6ec:	a0 e8       	ldi	r26, 0x80	; 128
     6ee:	b4 e0       	ldi	r27, 0x04	; 4
     6f0:	8c 91       	ld	r24, X
     6f2:	80 63       	ori	r24, 0x30	; 48
     6f4:	8c 93       	st	X, r24
	 PORTB.DIR |= (1<<2) | (1<<3);
     6f6:	e0 e2       	ldi	r30, 0x20	; 32
     6f8:	f4 e0       	ldi	r31, 0x04	; 4
     6fa:	80 81       	ld	r24, Z
     6fc:	8c 60       	ori	r24, 0x0C	; 12
     6fe:	80 83       	st	Z, r24
	 
	// PORTE.OUTSET |= (1<<5);  // Direction Pin (for back)
	 PORTE.OUTSET |= (1<<5); //  Direction Pin (for Forward)
     700:	15 96       	adiw	r26, 0x05	; 5
     702:	8c 91       	ld	r24, X
     704:	15 97       	sbiw	r26, 0x05	; 5
     706:	80 62       	ori	r24, 0x20	; 32
     708:	15 96       	adiw	r26, 0x05	; 5
     70a:	8c 93       	st	X, r24
	 
	 PORTB.OUTCLR |= (1<<2);  // I0 for current
     70c:	86 81       	ldd	r24, Z+6	; 0x06
     70e:	84 60       	ori	r24, 0x04	; 4
     710:	86 83       	std	Z+6, r24	; 0x06
	 PORTB.OUTSET |= (1<<3);  // I1 for current
     712:	85 81       	ldd	r24, Z+5	; 0x05
     714:	88 60       	ori	r24, 0x08	; 8
     716:	85 83       	std	Z+5, r24	; 0x05
	// PORTC.DIR &= ~(1 << 7);
	 //PORTC.PIN7CTRL |= (0x1 << 0);//Interrupt enabled with sense on both edges
	 //PORTC.PIN7CTRL |=(0x1 << 0) || (1<<3);
	 PORTC.PIN7CTRL |= (0x02<<0); //Interrupt enabled with Rising edges
     718:	e0 e4       	ldi	r30, 0x40	; 64
     71a:	f4 e0       	ldi	r31, 0x04	; 4
     71c:	87 89       	ldd	r24, Z+23	; 0x17
     71e:	82 60       	ori	r24, 0x02	; 2
     720:	87 8b       	std	Z+23, r24	; 0x17
     722:	08 95       	ret

00000724 <Loadcell>:
 }

 /******************************************loadcell******************************************/
 float Loadcell(void) //fun with no argument but return value
 {
     724:	cf 92       	push	r12
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
	// USART1_sendInt(ReadCount());
	 Loadcell_Value =0;
     730:	10 92 64 40 	sts	0x4064, r1	; 0x804064 <Loadcell_Value>
     734:	10 92 65 40 	sts	0x4065, r1	; 0x804065 <Loadcell_Value+0x1>
     738:	10 92 66 40 	sts	0x4066, r1	; 0x804066 <Loadcell_Value+0x2>
     73c:	10 92 67 40 	sts	0x4067, r1	; 0x804067 <Loadcell_Value+0x3>
 	 for(int i = 0; i<5; i++)
     740:	c0 e0       	ldi	r28, 0x00	; 0
     742:	d0 e0       	ldi	r29, 0x00	; 0
     744:	33 c0       	rjmp	.+102    	; 0x7ac <Loadcell+0x88>
	 {
		 M_Weight = (float)((ReadCount()- 8409443.0) * 0.009328283582089); //WEIGHT SCALES 8409443.0
     746:	0e 94 1c 02 	call	0x438	; 0x438 <ReadCount>
     74a:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatunsisf>
     74e:	23 e6       	ldi	r18, 0x63	; 99
     750:	31 e5       	ldi	r19, 0x51	; 81
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	5b e4       	ldi	r21, 0x4B	; 75
     756:	0e 94 96 04 	call	0x92c	; 0x92c <__subsf3>
     75a:	28 ea       	ldi	r18, 0xA8	; 168
     75c:	35 ed       	ldi	r19, 0xD5	; 213
     75e:	48 e1       	ldi	r20, 0x18	; 24
     760:	5c e3       	ldi	r21, 0x3C	; 60
     762:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     766:	6b 01       	movw	r12, r22
     768:	7c 01       	movw	r14, r24
     76a:	60 93 60 40 	sts	0x4060, r22	; 0x804060 <M_Weight>
     76e:	70 93 61 40 	sts	0x4061, r23	; 0x804061 <M_Weight+0x1>
     772:	80 93 62 40 	sts	0x4062, r24	; 0x804062 <M_Weight+0x2>
     776:	90 93 63 40 	sts	0x4063, r25	; 0x804063 <M_Weight+0x3>
		 //USART1_sendFloat(M_Weight,2);
		 Loadcell_Value +=  M_Weight;
     77a:	60 91 64 40 	lds	r22, 0x4064	; 0x804064 <Loadcell_Value>
     77e:	70 91 65 40 	lds	r23, 0x4065	; 0x804065 <Loadcell_Value+0x1>
     782:	80 91 66 40 	lds	r24, 0x4066	; 0x804066 <Loadcell_Value+0x2>
     786:	90 91 67 40 	lds	r25, 0x4067	; 0x804067 <Loadcell_Value+0x3>
     78a:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatunsisf>
     78e:	a7 01       	movw	r20, r14
     790:	96 01       	movw	r18, r12
     792:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     796:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
     79a:	60 93 64 40 	sts	0x4064, r22	; 0x804064 <Loadcell_Value>
     79e:	70 93 65 40 	sts	0x4065, r23	; 0x804065 <Loadcell_Value+0x1>
     7a2:	80 93 66 40 	sts	0x4066, r24	; 0x804066 <Loadcell_Value+0x2>
     7a6:	90 93 67 40 	sts	0x4067, r25	; 0x804067 <Loadcell_Value+0x3>
 /******************************************loadcell******************************************/
 float Loadcell(void) //fun with no argument but return value
 {
	// USART1_sendInt(ReadCount());
	 Loadcell_Value =0;
 	 for(int i = 0; i<5; i++)
     7aa:	21 96       	adiw	r28, 0x01	; 1
     7ac:	c5 30       	cpi	r28, 0x05	; 5
     7ae:	d1 05       	cpc	r29, r1
     7b0:	54 f2       	brlt	.-108    	; 0x746 <Loadcell+0x22>
		 M_Weight = (float)((ReadCount()- 8409443.0) * 0.009328283582089); //WEIGHT SCALES 8409443.0
		 //USART1_sendFloat(M_Weight,2);
		 Loadcell_Value +=  M_Weight;
		 //USART1_sendFloat(Loadcell_Value,2);
	 }
	 Avg = Loadcell_Value/5.0; //average value
     7b2:	60 91 64 40 	lds	r22, 0x4064	; 0x804064 <Loadcell_Value>
     7b6:	70 91 65 40 	lds	r23, 0x4065	; 0x804065 <Loadcell_Value+0x1>
     7ba:	80 91 66 40 	lds	r24, 0x4066	; 0x804066 <Loadcell_Value+0x2>
     7be:	90 91 67 40 	lds	r25, 0x4067	; 0x804067 <Loadcell_Value+0x3>
     7c2:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatunsisf>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 ea       	ldi	r20, 0xA0	; 160
     7cc:	50 e4       	ldi	r21, 0x40	; 64
     7ce:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
	 Avg -=160;
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e2       	ldi	r20, 0x20	; 32
     7d8:	53 e4       	ldi	r21, 0x43	; 67
     7da:	0e 94 96 04 	call	0x92c	; 0x92c <__subsf3>
     7de:	60 93 5a 40 	sts	0x405A, r22	; 0x80405a <Avg>
     7e2:	70 93 5b 40 	sts	0x405B, r23	; 0x80405b <Avg+0x1>
     7e6:	80 93 5c 40 	sts	0x405C, r24	; 0x80405c <Avg+0x2>
     7ea:	90 93 5d 40 	sts	0x405D, r25	; 0x80405d <Avg+0x3>
	 USART1_sendFloat(Avg,2);
     7ee:	42 e0       	ldi	r20, 0x02	; 2
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <USART1_sendFloat>
	 //return 0;
	 return Avg;
     7f6:	60 91 5a 40 	lds	r22, 0x405A	; 0x80405a <Avg>
     7fa:	70 91 5b 40 	lds	r23, 0x405B	; 0x80405b <Avg+0x1>
     7fe:	80 91 5c 40 	lds	r24, 0x405C	; 0x80405c <Avg+0x2>
     802:	90 91 5d 40 	lds	r25, 0x405D	; 0x80405d <Avg+0x3>
 }
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	08 95       	ret

00000814 <motoroff>:

 void motoroff(void)
 {	 
	 for(int i=0;i<40;i++)
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	0a c0       	rjmp	.+20     	; 0x82e <motoroff+0x1a>
	 {
	  PORTB.OUTSET |= (1<<2);  // I0 for current
     81a:	e0 e2       	ldi	r30, 0x20	; 32
     81c:	f4 e0       	ldi	r31, 0x04	; 4
     81e:	85 81       	ldd	r24, Z+5	; 0x05
     820:	84 60       	ori	r24, 0x04	; 4
     822:	85 83       	std	Z+5, r24	; 0x05
	  PORTB.OUTSET |= (1<<3);  // I1 for current
     824:	85 81       	ldd	r24, Z+5	; 0x05
     826:	88 60       	ori	r24, 0x08	; 8
     828:	85 83       	std	Z+5, r24	; 0x05
	 return Avg;
 }

 void motoroff(void)
 {	 
	 for(int i=0;i<40;i++)
     82a:	2f 5f       	subi	r18, 0xFF	; 255
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
     82e:	28 32       	cpi	r18, 0x28	; 40
     830:	31 05       	cpc	r19, r1
     832:	9c f3       	brlt	.-26     	; 0x81a <motoroff+0x6>
	 {
	  PORTB.OUTSET |= (1<<2);  // I0 for current
	  PORTB.OUTSET |= (1<<3);  // I1 for current
	 }
 }
     834:	08 95       	ret

00000836 <Occlusion_check>:


 /***********************occlusion check******************************************************/

 void Occlusion_check(float Avg) // occlusion check 60ml,20ml,10ml,5ml syringe
 {
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	6b 01       	movw	r12, r22
     844:	7c 01       	movw	r14, r24
	 if((syringe == 60) && ( Avg > _60ml_occlusion))
     846:	c0 91 5e 40 	lds	r28, 0x405E	; 0x80405e <syringe>
     84a:	d0 91 5f 40 	lds	r29, 0x405F	; 0x80405f <syringe+0x1>
     84e:	cc 33       	cpi	r28, 0x3C	; 60
     850:	d1 05       	cpc	r29, r1
     852:	79 f4       	brne	.+30     	; 0x872 <Occlusion_check+0x3c>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	41 ee       	ldi	r20, 0xE1	; 225
     85a:	54 e4       	ldi	r21, 0x44	; 68
     85c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__gesf2>
     860:	18 16       	cp	r1, r24
     862:	3c f4       	brge	.+14     	; 0x872 <Occlusion_check+0x3c>
	 {
		 USART1_sendString("occlusion_detected");
     864:	84 e4       	ldi	r24, 0x44	; 68
     866:	90 e4       	ldi	r25, 0x40	; 64
     868:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
		 motoroff();
     86c:	0e 94 0a 04 	call	0x814	; 0x814 <motoroff>
 /***********************occlusion check******************************************************/

 void Occlusion_check(float Avg) // occlusion check 60ml,20ml,10ml,5ml syringe
 {
	 if((syringe == 60) && ( Avg > _60ml_occlusion))
	 {
     870:	36 c0       	rjmp	.+108    	; 0x8de <Occlusion_check+0xa8>
		 USART1_sendString("occlusion_detected");
		 motoroff();
	 }
	 else if((syringe == 20) && (Avg > _20ml_occlusion))
     872:	c4 31       	cpi	r28, 0x14	; 20
     874:	d1 05       	cpc	r29, r1
     876:	89 f4       	brne	.+34     	; 0x89a <Occlusion_check+0x64>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e8       	ldi	r19, 0x80	; 128
     87c:	49 e8       	ldi	r20, 0x89	; 137
     87e:	54 e4       	ldi	r21, 0x44	; 68
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__gesf2>
     888:	18 16       	cp	r1, r24
     88a:	3c f4       	brge	.+14     	; 0x89a <Occlusion_check+0x64>
	 {
		 USART1_sendString("occlusion_detected");
     88c:	84 e4       	ldi	r24, 0x44	; 68
     88e:	90 e4       	ldi	r25, 0x40	; 64
     890:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
		 motoroff();
     894:	0e 94 0a 04 	call	0x814	; 0x814 <motoroff>
	 {
		 USART1_sendString("occlusion_detected");
		 motoroff();
	 }
	 else if((syringe == 20) && (Avg > _20ml_occlusion))
	 {
     898:	22 c0       	rjmp	.+68     	; 0x8de <Occlusion_check+0xa8>
		 USART1_sendString("occlusion_detected");
		 motoroff();
	 }
	 else if((syringe == 10) && (Avg > _10ml_occlusion))
     89a:	ca 30       	cpi	r28, 0x0A	; 10
     89c:	d1 05       	cpc	r29, r1
     89e:	79 f4       	brne	.+30     	; 0x8be <Occlusion_check+0x88>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	48 e4       	ldi	r20, 0x48	; 72
     8a6:	54 e4       	ldi	r21, 0x44	; 68
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__gesf2>
     8b0:	18 16       	cp	r1, r24
     8b2:	2c f4       	brge	.+10     	; 0x8be <Occlusion_check+0x88>
	 {
		 USART1_sendString("occlusion_detected");
     8b4:	84 e4       	ldi	r24, 0x44	; 68
     8b6:	90 e4       	ldi	r25, 0x40	; 64
     8b8:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
     8bc:	10 c0       	rjmp	.+32     	; 0x8de <Occlusion_check+0xa8>
	 }
	 else if((syringe == 5) && (Avg > _5ml_occlusion))
     8be:	25 97       	sbiw	r28, 0x05	; 5
     8c0:	71 f4       	brne	.+28     	; 0x8de <Occlusion_check+0xa8>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	4a ef       	ldi	r20, 0xFA	; 250
     8c8:	53 e4       	ldi	r21, 0x43	; 67
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__gesf2>
     8d2:	18 16       	cp	r1, r24
     8d4:	24 f4       	brge	.+8      	; 0x8de <Occlusion_check+0xa8>
	 {
		 USART1_sendString("occlusion_detected");
     8d6:	84 e4       	ldi	r24, 0x44	; 68
     8d8:	90 e4       	ldi	r25, 0x40	; 64
     8da:	0e 94 cc 01 	call	0x398	; 0x398 <USART1_sendString>
	 }
 }
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	08 95       	ret

000008ec <main>:
	 }
 }

 int main(void)
 {
	 sei();
     8ec:	78 94       	sei
	 USART1_init(9600);
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	95 e2       	ldi	r25, 0x25	; 37
     8f2:	0e 94 9a 01 	call	0x334	; 0x334 <USART1_init>
	 ADC0_init();
     8f6:	0e 94 02 02 	call	0x404	; 0x404 <ADC0_init>
	 gpio_init();
     8fa:	0e 94 6e 03 	call	0x6dc	; 0x6dc <gpio_init>
	 syringe_check_init();
     8fe:	0e 94 58 03 	call	0x6b0	; 0x6b0 <syringe_check_init>
	 
	 while(1)
	 {
		 if (run_ok_syringe)
     902:	80 91 58 40 	lds	r24, 0x4058	; 0x804058 <__data_end>
     906:	88 23       	and	r24, r24
     908:	e1 f3       	breq	.-8      	; 0x902 <main+0x16>
		 {
			 syringeforward();
     90a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <syringeforward>
			 ok_syringe();
     90e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <ok_syringe>
		     Loadcell();	  
     912:	0e 94 92 03 	call	0x724	; 0x724 <Loadcell>
			 Occlusion_check(Avg);
     916:	60 91 5a 40 	lds	r22, 0x405A	; 0x80405a <Avg>
     91a:	70 91 5b 40 	lds	r23, 0x405B	; 0x80405b <Avg+0x1>
     91e:	80 91 5c 40 	lds	r24, 0x405C	; 0x80405c <Avg+0x2>
     922:	90 91 5d 40 	lds	r25, 0x405D	; 0x80405d <Avg+0x3>
     926:	0e 94 1b 04 	call	0x836	; 0x836 <Occlusion_check>
     92a:	eb cf       	rjmp	.-42     	; 0x902 <main+0x16>

0000092c <__subsf3>:
     92c:	50 58       	subi	r21, 0x80	; 128

0000092e <__addsf3>:
     92e:	bb 27       	eor	r27, r27
     930:	aa 27       	eor	r26, r26
     932:	0e 94 ae 04 	call	0x95c	; 0x95c <__addsf3x>
     936:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_round>
     93a:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscA>
     93e:	38 f0       	brcs	.+14     	; 0x94e <__addsf3+0x20>
     940:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscB>
     944:	20 f0       	brcs	.+8      	; 0x94e <__addsf3+0x20>
     946:	39 f4       	brne	.+14     	; 0x956 <__addsf3+0x28>
     948:	9f 3f       	cpi	r25, 0xFF	; 255
     94a:	19 f4       	brne	.+6      	; 0x952 <__addsf3+0x24>
     94c:	26 f4       	brtc	.+8      	; 0x956 <__addsf3+0x28>
     94e:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
     952:	0e f4       	brtc	.+2      	; 0x956 <__addsf3+0x28>
     954:	e0 95       	com	r30
     956:	e7 fb       	bst	r30, 7
     958:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>

0000095c <__addsf3x>:
     95c:	e9 2f       	mov	r30, r25
     95e:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_split3>
     962:	58 f3       	brcs	.-42     	; 0x93a <__addsf3+0xc>
     964:	ba 17       	cp	r27, r26
     966:	62 07       	cpc	r22, r18
     968:	73 07       	cpc	r23, r19
     96a:	84 07       	cpc	r24, r20
     96c:	95 07       	cpc	r25, r21
     96e:	20 f0       	brcs	.+8      	; 0x978 <__addsf3x+0x1c>
     970:	79 f4       	brne	.+30     	; 0x990 <__addsf3x+0x34>
     972:	a6 f5       	brtc	.+104    	; 0x9dc <__addsf3x+0x80>
     974:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_zero>
     978:	0e f4       	brtc	.+2      	; 0x97c <__addsf3x+0x20>
     97a:	e0 95       	com	r30
     97c:	0b 2e       	mov	r0, r27
     97e:	ba 2f       	mov	r27, r26
     980:	a0 2d       	mov	r26, r0
     982:	0b 01       	movw	r0, r22
     984:	b9 01       	movw	r22, r18
     986:	90 01       	movw	r18, r0
     988:	0c 01       	movw	r0, r24
     98a:	ca 01       	movw	r24, r20
     98c:	a0 01       	movw	r20, r0
     98e:	11 24       	eor	r1, r1
     990:	ff 27       	eor	r31, r31
     992:	59 1b       	sub	r21, r25
     994:	99 f0       	breq	.+38     	; 0x9bc <__addsf3x+0x60>
     996:	59 3f       	cpi	r21, 0xF9	; 249
     998:	50 f4       	brcc	.+20     	; 0x9ae <__addsf3x+0x52>
     99a:	50 3e       	cpi	r21, 0xE0	; 224
     99c:	68 f1       	brcs	.+90     	; 0x9f8 <__addsf3x+0x9c>
     99e:	1a 16       	cp	r1, r26
     9a0:	f0 40       	sbci	r31, 0x00	; 0
     9a2:	a2 2f       	mov	r26, r18
     9a4:	23 2f       	mov	r18, r19
     9a6:	34 2f       	mov	r19, r20
     9a8:	44 27       	eor	r20, r20
     9aa:	58 5f       	subi	r21, 0xF8	; 248
     9ac:	f3 cf       	rjmp	.-26     	; 0x994 <__addsf3x+0x38>
     9ae:	46 95       	lsr	r20
     9b0:	37 95       	ror	r19
     9b2:	27 95       	ror	r18
     9b4:	a7 95       	ror	r26
     9b6:	f0 40       	sbci	r31, 0x00	; 0
     9b8:	53 95       	inc	r21
     9ba:	c9 f7       	brne	.-14     	; 0x9ae <__addsf3x+0x52>
     9bc:	7e f4       	brtc	.+30     	; 0x9dc <__addsf3x+0x80>
     9be:	1f 16       	cp	r1, r31
     9c0:	ba 0b       	sbc	r27, r26
     9c2:	62 0b       	sbc	r22, r18
     9c4:	73 0b       	sbc	r23, r19
     9c6:	84 0b       	sbc	r24, r20
     9c8:	ba f0       	brmi	.+46     	; 0x9f8 <__addsf3x+0x9c>
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	a1 f0       	breq	.+40     	; 0x9f6 <__addsf3x+0x9a>
     9ce:	ff 0f       	add	r31, r31
     9d0:	bb 1f       	adc	r27, r27
     9d2:	66 1f       	adc	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	88 1f       	adc	r24, r24
     9d8:	c2 f7       	brpl	.-16     	; 0x9ca <__addsf3x+0x6e>
     9da:	0e c0       	rjmp	.+28     	; 0x9f8 <__addsf3x+0x9c>
     9dc:	ba 0f       	add	r27, r26
     9de:	62 1f       	adc	r22, r18
     9e0:	73 1f       	adc	r23, r19
     9e2:	84 1f       	adc	r24, r20
     9e4:	48 f4       	brcc	.+18     	; 0x9f8 <__addsf3x+0x9c>
     9e6:	87 95       	ror	r24
     9e8:	77 95       	ror	r23
     9ea:	67 95       	ror	r22
     9ec:	b7 95       	ror	r27
     9ee:	f7 95       	ror	r31
     9f0:	9e 3f       	cpi	r25, 0xFE	; 254
     9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__addsf3x+0x9a>
     9f4:	b0 cf       	rjmp	.-160    	; 0x956 <__addsf3+0x28>
     9f6:	93 95       	inc	r25
     9f8:	88 0f       	add	r24, r24
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <__addsf3x+0xa2>
     9fc:	99 27       	eor	r25, r25
     9fe:	ee 0f       	add	r30, r30
     a00:	97 95       	ror	r25
     a02:	87 95       	ror	r24
     a04:	08 95       	ret

00000a06 <__cmpsf2>:
     a06:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_cmp>
     a0a:	08 f4       	brcc	.+2      	; 0xa0e <__cmpsf2+0x8>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	08 95       	ret

00000a10 <__divsf3>:
     a10:	0e 94 1c 05 	call	0xa38	; 0xa38 <__divsf3x>
     a14:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_round>
     a18:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscB>
     a1c:	58 f0       	brcs	.+22     	; 0xa34 <__divsf3+0x24>
     a1e:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscA>
     a22:	40 f0       	brcs	.+16     	; 0xa34 <__divsf3+0x24>
     a24:	29 f4       	brne	.+10     	; 0xa30 <__divsf3+0x20>
     a26:	5f 3f       	cpi	r21, 0xFF	; 255
     a28:	29 f0       	breq	.+10     	; 0xa34 <__divsf3+0x24>
     a2a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     a2e:	51 11       	cpse	r21, r1
     a30:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     a34:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>

00000a38 <__divsf3x>:
     a38:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_split3>
     a3c:	68 f3       	brcs	.-38     	; 0xa18 <__divsf3+0x8>

00000a3e <__divsf3_pse>:
     a3e:	99 23       	and	r25, r25
     a40:	b1 f3       	breq	.-20     	; 0xa2e <__divsf3+0x1e>
     a42:	55 23       	and	r21, r21
     a44:	91 f3       	breq	.-28     	; 0xa2a <__divsf3+0x1a>
     a46:	95 1b       	sub	r25, r21
     a48:	55 0b       	sbc	r21, r21
     a4a:	bb 27       	eor	r27, r27
     a4c:	aa 27       	eor	r26, r26
     a4e:	62 17       	cp	r22, r18
     a50:	73 07       	cpc	r23, r19
     a52:	84 07       	cpc	r24, r20
     a54:	38 f0       	brcs	.+14     	; 0xa64 <__divsf3_pse+0x26>
     a56:	9f 5f       	subi	r25, 0xFF	; 255
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	44 1f       	adc	r20, r20
     a60:	aa 1f       	adc	r26, r26
     a62:	a9 f3       	breq	.-22     	; 0xa4e <__divsf3_pse+0x10>
     a64:	35 d0       	rcall	.+106    	; 0xad0 <__divsf3_pse+0x92>
     a66:	0e 2e       	mov	r0, r30
     a68:	3a f0       	brmi	.+14     	; 0xa78 <__divsf3_pse+0x3a>
     a6a:	e0 e8       	ldi	r30, 0x80	; 128
     a6c:	32 d0       	rcall	.+100    	; 0xad2 <__divsf3_pse+0x94>
     a6e:	91 50       	subi	r25, 0x01	; 1
     a70:	50 40       	sbci	r21, 0x00	; 0
     a72:	e6 95       	lsr	r30
     a74:	00 1c       	adc	r0, r0
     a76:	ca f7       	brpl	.-14     	; 0xa6a <__divsf3_pse+0x2c>
     a78:	2b d0       	rcall	.+86     	; 0xad0 <__divsf3_pse+0x92>
     a7a:	fe 2f       	mov	r31, r30
     a7c:	29 d0       	rcall	.+82     	; 0xad0 <__divsf3_pse+0x92>
     a7e:	66 0f       	add	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	88 1f       	adc	r24, r24
     a84:	bb 1f       	adc	r27, r27
     a86:	26 17       	cp	r18, r22
     a88:	37 07       	cpc	r19, r23
     a8a:	48 07       	cpc	r20, r24
     a8c:	ab 07       	cpc	r26, r27
     a8e:	b0 e8       	ldi	r27, 0x80	; 128
     a90:	09 f0       	breq	.+2      	; 0xa94 <__divsf3_pse+0x56>
     a92:	bb 0b       	sbc	r27, r27
     a94:	80 2d       	mov	r24, r0
     a96:	bf 01       	movw	r22, r30
     a98:	ff 27       	eor	r31, r31
     a9a:	93 58       	subi	r25, 0x83	; 131
     a9c:	5f 4f       	sbci	r21, 0xFF	; 255
     a9e:	3a f0       	brmi	.+14     	; 0xaae <__divsf3_pse+0x70>
     aa0:	9e 3f       	cpi	r25, 0xFE	; 254
     aa2:	51 05       	cpc	r21, r1
     aa4:	78 f0       	brcs	.+30     	; 0xac4 <__divsf3_pse+0x86>
     aa6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     aaa:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     aae:	5f 3f       	cpi	r21, 0xFF	; 255
     ab0:	e4 f3       	brlt	.-8      	; 0xaaa <__divsf3_pse+0x6c>
     ab2:	98 3e       	cpi	r25, 0xE8	; 232
     ab4:	d4 f3       	brlt	.-12     	; 0xaaa <__divsf3_pse+0x6c>
     ab6:	86 95       	lsr	r24
     ab8:	77 95       	ror	r23
     aba:	67 95       	ror	r22
     abc:	b7 95       	ror	r27
     abe:	f7 95       	ror	r31
     ac0:	9f 5f       	subi	r25, 0xFF	; 255
     ac2:	c9 f7       	brne	.-14     	; 0xab6 <__divsf3_pse+0x78>
     ac4:	88 0f       	add	r24, r24
     ac6:	91 1d       	adc	r25, r1
     ac8:	96 95       	lsr	r25
     aca:	87 95       	ror	r24
     acc:	97 f9       	bld	r25, 7
     ace:	08 95       	ret
     ad0:	e1 e0       	ldi	r30, 0x01	; 1
     ad2:	66 0f       	add	r22, r22
     ad4:	77 1f       	adc	r23, r23
     ad6:	88 1f       	adc	r24, r24
     ad8:	bb 1f       	adc	r27, r27
     ada:	62 17       	cp	r22, r18
     adc:	73 07       	cpc	r23, r19
     ade:	84 07       	cpc	r24, r20
     ae0:	ba 07       	cpc	r27, r26
     ae2:	20 f0       	brcs	.+8      	; 0xaec <__divsf3_pse+0xae>
     ae4:	62 1b       	sub	r22, r18
     ae6:	73 0b       	sbc	r23, r19
     ae8:	84 0b       	sbc	r24, r20
     aea:	ba 0b       	sbc	r27, r26
     aec:	ee 1f       	adc	r30, r30
     aee:	88 f7       	brcc	.-30     	; 0xad2 <__divsf3_pse+0x94>
     af0:	e0 95       	com	r30
     af2:	08 95       	ret

00000af4 <__fixsfsi>:
     af4:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
     af8:	68 94       	set
     afa:	b1 11       	cpse	r27, r1
     afc:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     b00:	08 95       	ret

00000b02 <__fixunssfsi>:
     b02:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_splitA>
     b06:	88 f0       	brcs	.+34     	; 0xb2a <__fixunssfsi+0x28>
     b08:	9f 57       	subi	r25, 0x7F	; 127
     b0a:	98 f0       	brcs	.+38     	; 0xb32 <__fixunssfsi+0x30>
     b0c:	b9 2f       	mov	r27, r25
     b0e:	99 27       	eor	r25, r25
     b10:	b7 51       	subi	r27, 0x17	; 23
     b12:	b0 f0       	brcs	.+44     	; 0xb40 <__fixunssfsi+0x3e>
     b14:	e1 f0       	breq	.+56     	; 0xb4e <__fixunssfsi+0x4c>
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	88 1f       	adc	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	1a f0       	brmi	.+6      	; 0xb26 <__fixunssfsi+0x24>
     b20:	ba 95       	dec	r27
     b22:	c9 f7       	brne	.-14     	; 0xb16 <__fixunssfsi+0x14>
     b24:	14 c0       	rjmp	.+40     	; 0xb4e <__fixunssfsi+0x4c>
     b26:	b1 30       	cpi	r27, 0x01	; 1
     b28:	91 f0       	breq	.+36     	; 0xb4e <__fixunssfsi+0x4c>
     b2a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_zero>
     b2e:	b1 e0       	ldi	r27, 0x01	; 1
     b30:	08 95       	ret
     b32:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_zero>
     b36:	67 2f       	mov	r22, r23
     b38:	78 2f       	mov	r23, r24
     b3a:	88 27       	eor	r24, r24
     b3c:	b8 5f       	subi	r27, 0xF8	; 248
     b3e:	39 f0       	breq	.+14     	; 0xb4e <__fixunssfsi+0x4c>
     b40:	b9 3f       	cpi	r27, 0xF9	; 249
     b42:	cc f3       	brlt	.-14     	; 0xb36 <__fixunssfsi+0x34>
     b44:	86 95       	lsr	r24
     b46:	77 95       	ror	r23
     b48:	67 95       	ror	r22
     b4a:	b3 95       	inc	r27
     b4c:	d9 f7       	brne	.-10     	; 0xb44 <__fixunssfsi+0x42>
     b4e:	3e f4       	brtc	.+14     	; 0xb5e <__fixunssfsi+0x5c>
     b50:	90 95       	com	r25
     b52:	80 95       	com	r24
     b54:	70 95       	com	r23
     b56:	61 95       	neg	r22
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	8f 4f       	sbci	r24, 0xFF	; 255
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	08 95       	ret

00000b60 <__floatunsisf>:
     b60:	e8 94       	clt
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <__floatsisf+0x12>

00000b64 <__floatsisf>:
     b64:	97 fb       	bst	r25, 7
     b66:	3e f4       	brtc	.+14     	; 0xb76 <__floatsisf+0x12>
     b68:	90 95       	com	r25
     b6a:	80 95       	com	r24
     b6c:	70 95       	com	r23
     b6e:	61 95       	neg	r22
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	99 23       	and	r25, r25
     b78:	a9 f0       	breq	.+42     	; 0xba4 <__floatsisf+0x40>
     b7a:	f9 2f       	mov	r31, r25
     b7c:	96 e9       	ldi	r25, 0x96	; 150
     b7e:	bb 27       	eor	r27, r27
     b80:	93 95       	inc	r25
     b82:	f6 95       	lsr	r31
     b84:	87 95       	ror	r24
     b86:	77 95       	ror	r23
     b88:	67 95       	ror	r22
     b8a:	b7 95       	ror	r27
     b8c:	f1 11       	cpse	r31, r1
     b8e:	f8 cf       	rjmp	.-16     	; 0xb80 <__floatsisf+0x1c>
     b90:	fa f4       	brpl	.+62     	; 0xbd0 <__floatsisf+0x6c>
     b92:	bb 0f       	add	r27, r27
     b94:	11 f4       	brne	.+4      	; 0xb9a <__floatsisf+0x36>
     b96:	60 ff       	sbrs	r22, 0
     b98:	1b c0       	rjmp	.+54     	; 0xbd0 <__floatsisf+0x6c>
     b9a:	6f 5f       	subi	r22, 0xFF	; 255
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <__floatsisf+0x6c>
     ba4:	88 23       	and	r24, r24
     ba6:	11 f0       	breq	.+4      	; 0xbac <__floatsisf+0x48>
     ba8:	96 e9       	ldi	r25, 0x96	; 150
     baa:	11 c0       	rjmp	.+34     	; 0xbce <__floatsisf+0x6a>
     bac:	77 23       	and	r23, r23
     bae:	21 f0       	breq	.+8      	; 0xbb8 <__floatsisf+0x54>
     bb0:	9e e8       	ldi	r25, 0x8E	; 142
     bb2:	87 2f       	mov	r24, r23
     bb4:	76 2f       	mov	r23, r22
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__floatsisf+0x5e>
     bb8:	66 23       	and	r22, r22
     bba:	71 f0       	breq	.+28     	; 0xbd8 <__floatsisf+0x74>
     bbc:	96 e8       	ldi	r25, 0x86	; 134
     bbe:	86 2f       	mov	r24, r22
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__floatsisf+0x6c>
     bc6:	9a 95       	dec	r25
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	88 1f       	adc	r24, r24
     bce:	da f7       	brpl	.-10     	; 0xbc6 <__floatsisf+0x62>
     bd0:	88 0f       	add	r24, r24
     bd2:	96 95       	lsr	r25
     bd4:	87 95       	ror	r24
     bd6:	97 f9       	bld	r25, 7
     bd8:	08 95       	ret

00000bda <__fp_cmp>:
     bda:	99 0f       	add	r25, r25
     bdc:	00 08       	sbc	r0, r0
     bde:	55 0f       	add	r21, r21
     be0:	aa 0b       	sbc	r26, r26
     be2:	e0 e8       	ldi	r30, 0x80	; 128
     be4:	fe ef       	ldi	r31, 0xFE	; 254
     be6:	16 16       	cp	r1, r22
     be8:	17 06       	cpc	r1, r23
     bea:	e8 07       	cpc	r30, r24
     bec:	f9 07       	cpc	r31, r25
     bee:	c0 f0       	brcs	.+48     	; 0xc20 <__fp_cmp+0x46>
     bf0:	12 16       	cp	r1, r18
     bf2:	13 06       	cpc	r1, r19
     bf4:	e4 07       	cpc	r30, r20
     bf6:	f5 07       	cpc	r31, r21
     bf8:	98 f0       	brcs	.+38     	; 0xc20 <__fp_cmp+0x46>
     bfa:	62 1b       	sub	r22, r18
     bfc:	73 0b       	sbc	r23, r19
     bfe:	84 0b       	sbc	r24, r20
     c00:	95 0b       	sbc	r25, r21
     c02:	39 f4       	brne	.+14     	; 0xc12 <__fp_cmp+0x38>
     c04:	0a 26       	eor	r0, r26
     c06:	61 f0       	breq	.+24     	; 0xc20 <__fp_cmp+0x46>
     c08:	23 2b       	or	r18, r19
     c0a:	24 2b       	or	r18, r20
     c0c:	25 2b       	or	r18, r21
     c0e:	21 f4       	brne	.+8      	; 0xc18 <__fp_cmp+0x3e>
     c10:	08 95       	ret
     c12:	0a 26       	eor	r0, r26
     c14:	09 f4       	brne	.+2      	; 0xc18 <__fp_cmp+0x3e>
     c16:	a1 40       	sbci	r26, 0x01	; 1
     c18:	a6 95       	lsr	r26
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	81 1d       	adc	r24, r1
     c1e:	81 1d       	adc	r24, r1
     c20:	08 95       	ret

00000c22 <__fp_inf>:
     c22:	97 f9       	bld	r25, 7
     c24:	9f 67       	ori	r25, 0x7F	; 127
     c26:	80 e8       	ldi	r24, 0x80	; 128
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	08 95       	ret

00000c2e <__fp_nan>:
     c2e:	9f ef       	ldi	r25, 0xFF	; 255
     c30:	80 ec       	ldi	r24, 0xC0	; 192
     c32:	08 95       	ret

00000c34 <__fp_pscA>:
     c34:	00 24       	eor	r0, r0
     c36:	0a 94       	dec	r0
     c38:	16 16       	cp	r1, r22
     c3a:	17 06       	cpc	r1, r23
     c3c:	18 06       	cpc	r1, r24
     c3e:	09 06       	cpc	r0, r25
     c40:	08 95       	ret

00000c42 <__fp_pscB>:
     c42:	00 24       	eor	r0, r0
     c44:	0a 94       	dec	r0
     c46:	12 16       	cp	r1, r18
     c48:	13 06       	cpc	r1, r19
     c4a:	14 06       	cpc	r1, r20
     c4c:	05 06       	cpc	r0, r21
     c4e:	08 95       	ret

00000c50 <__fp_round>:
     c50:	09 2e       	mov	r0, r25
     c52:	03 94       	inc	r0
     c54:	00 0c       	add	r0, r0
     c56:	11 f4       	brne	.+4      	; 0xc5c <__fp_round+0xc>
     c58:	88 23       	and	r24, r24
     c5a:	52 f0       	brmi	.+20     	; 0xc70 <__fp_round+0x20>
     c5c:	bb 0f       	add	r27, r27
     c5e:	40 f4       	brcc	.+16     	; 0xc70 <__fp_round+0x20>
     c60:	bf 2b       	or	r27, r31
     c62:	11 f4       	brne	.+4      	; 0xc68 <__fp_round+0x18>
     c64:	60 ff       	sbrs	r22, 0
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <__fp_round+0x20>
     c68:	6f 5f       	subi	r22, 0xFF	; 255
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	8f 4f       	sbci	r24, 0xFF	; 255
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	08 95       	ret

00000c72 <__fp_split3>:
     c72:	57 fd       	sbrc	r21, 7
     c74:	90 58       	subi	r25, 0x80	; 128
     c76:	44 0f       	add	r20, r20
     c78:	55 1f       	adc	r21, r21
     c7a:	59 f0       	breq	.+22     	; 0xc92 <__fp_splitA+0x10>
     c7c:	5f 3f       	cpi	r21, 0xFF	; 255
     c7e:	71 f0       	breq	.+28     	; 0xc9c <__fp_splitA+0x1a>
     c80:	47 95       	ror	r20

00000c82 <__fp_splitA>:
     c82:	88 0f       	add	r24, r24
     c84:	97 fb       	bst	r25, 7
     c86:	99 1f       	adc	r25, r25
     c88:	61 f0       	breq	.+24     	; 0xca2 <__fp_splitA+0x20>
     c8a:	9f 3f       	cpi	r25, 0xFF	; 255
     c8c:	79 f0       	breq	.+30     	; 0xcac <__fp_splitA+0x2a>
     c8e:	87 95       	ror	r24
     c90:	08 95       	ret
     c92:	12 16       	cp	r1, r18
     c94:	13 06       	cpc	r1, r19
     c96:	14 06       	cpc	r1, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	f2 cf       	rjmp	.-28     	; 0xc80 <__fp_split3+0xe>
     c9c:	46 95       	lsr	r20
     c9e:	f1 df       	rcall	.-30     	; 0xc82 <__fp_splitA>
     ca0:	08 c0       	rjmp	.+16     	; 0xcb2 <__fp_splitA+0x30>
     ca2:	16 16       	cp	r1, r22
     ca4:	17 06       	cpc	r1, r23
     ca6:	18 06       	cpc	r1, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	f1 cf       	rjmp	.-30     	; 0xc8e <__fp_splitA+0xc>
     cac:	86 95       	lsr	r24
     cae:	71 05       	cpc	r23, r1
     cb0:	61 05       	cpc	r22, r1
     cb2:	08 94       	sec
     cb4:	08 95       	ret

00000cb6 <__fp_zero>:
     cb6:	e8 94       	clt

00000cb8 <__fp_szero>:
     cb8:	bb 27       	eor	r27, r27
     cba:	66 27       	eor	r22, r22
     cbc:	77 27       	eor	r23, r23
     cbe:	cb 01       	movw	r24, r22
     cc0:	97 f9       	bld	r25, 7
     cc2:	08 95       	ret

00000cc4 <__gesf2>:
     cc4:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_cmp>
     cc8:	08 f4       	brcc	.+2      	; 0xccc <__gesf2+0x8>
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	08 95       	ret

00000cce <__mulsf3>:
     cce:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__mulsf3x>
     cd2:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_round>
     cd6:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscA>
     cda:	38 f0       	brcs	.+14     	; 0xcea <__mulsf3+0x1c>
     cdc:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscB>
     ce0:	20 f0       	brcs	.+8      	; 0xcea <__mulsf3+0x1c>
     ce2:	95 23       	and	r25, r21
     ce4:	11 f0       	breq	.+4      	; 0xcea <__mulsf3+0x1c>
     ce6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     cea:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
     cee:	11 24       	eor	r1, r1
     cf0:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>

00000cf4 <__mulsf3x>:
     cf4:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_split3>
     cf8:	70 f3       	brcs	.-36     	; 0xcd6 <__mulsf3+0x8>

00000cfa <__mulsf3_pse>:
     cfa:	95 9f       	mul	r25, r21
     cfc:	c1 f3       	breq	.-16     	; 0xcee <__mulsf3+0x20>
     cfe:	95 0f       	add	r25, r21
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	55 1f       	adc	r21, r21
     d04:	62 9f       	mul	r22, r18
     d06:	f0 01       	movw	r30, r0
     d08:	72 9f       	mul	r23, r18
     d0a:	bb 27       	eor	r27, r27
     d0c:	f0 0d       	add	r31, r0
     d0e:	b1 1d       	adc	r27, r1
     d10:	63 9f       	mul	r22, r19
     d12:	aa 27       	eor	r26, r26
     d14:	f0 0d       	add	r31, r0
     d16:	b1 1d       	adc	r27, r1
     d18:	aa 1f       	adc	r26, r26
     d1a:	64 9f       	mul	r22, r20
     d1c:	66 27       	eor	r22, r22
     d1e:	b0 0d       	add	r27, r0
     d20:	a1 1d       	adc	r26, r1
     d22:	66 1f       	adc	r22, r22
     d24:	82 9f       	mul	r24, r18
     d26:	22 27       	eor	r18, r18
     d28:	b0 0d       	add	r27, r0
     d2a:	a1 1d       	adc	r26, r1
     d2c:	62 1f       	adc	r22, r18
     d2e:	73 9f       	mul	r23, r19
     d30:	b0 0d       	add	r27, r0
     d32:	a1 1d       	adc	r26, r1
     d34:	62 1f       	adc	r22, r18
     d36:	83 9f       	mul	r24, r19
     d38:	a0 0d       	add	r26, r0
     d3a:	61 1d       	adc	r22, r1
     d3c:	22 1f       	adc	r18, r18
     d3e:	74 9f       	mul	r23, r20
     d40:	33 27       	eor	r19, r19
     d42:	a0 0d       	add	r26, r0
     d44:	61 1d       	adc	r22, r1
     d46:	23 1f       	adc	r18, r19
     d48:	84 9f       	mul	r24, r20
     d4a:	60 0d       	add	r22, r0
     d4c:	21 1d       	adc	r18, r1
     d4e:	82 2f       	mov	r24, r18
     d50:	76 2f       	mov	r23, r22
     d52:	6a 2f       	mov	r22, r26
     d54:	11 24       	eor	r1, r1
     d56:	9f 57       	subi	r25, 0x7F	; 127
     d58:	50 40       	sbci	r21, 0x00	; 0
     d5a:	9a f0       	brmi	.+38     	; 0xd82 <__mulsf3_pse+0x88>
     d5c:	f1 f0       	breq	.+60     	; 0xd9a <__mulsf3_pse+0xa0>
     d5e:	88 23       	and	r24, r24
     d60:	4a f0       	brmi	.+18     	; 0xd74 <__mulsf3_pse+0x7a>
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	bb 1f       	adc	r27, r27
     d68:	66 1f       	adc	r22, r22
     d6a:	77 1f       	adc	r23, r23
     d6c:	88 1f       	adc	r24, r24
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	50 40       	sbci	r21, 0x00	; 0
     d72:	a9 f7       	brne	.-22     	; 0xd5e <__mulsf3_pse+0x64>
     d74:	9e 3f       	cpi	r25, 0xFE	; 254
     d76:	51 05       	cpc	r21, r1
     d78:	80 f0       	brcs	.+32     	; 0xd9a <__mulsf3_pse+0xa0>
     d7a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     d7e:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     d82:	5f 3f       	cpi	r21, 0xFF	; 255
     d84:	e4 f3       	brlt	.-8      	; 0xd7e <__mulsf3_pse+0x84>
     d86:	98 3e       	cpi	r25, 0xE8	; 232
     d88:	d4 f3       	brlt	.-12     	; 0xd7e <__mulsf3_pse+0x84>
     d8a:	86 95       	lsr	r24
     d8c:	77 95       	ror	r23
     d8e:	67 95       	ror	r22
     d90:	b7 95       	ror	r27
     d92:	f7 95       	ror	r31
     d94:	e7 95       	ror	r30
     d96:	9f 5f       	subi	r25, 0xFF	; 255
     d98:	c1 f7       	brne	.-16     	; 0xd8a <__mulsf3_pse+0x90>
     d9a:	fe 2b       	or	r31, r30
     d9c:	88 0f       	add	r24, r24
     d9e:	91 1d       	adc	r25, r1
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	97 f9       	bld	r25, 7
     da6:	08 95       	ret

00000da8 <pow>:
     da8:	fa 01       	movw	r30, r20
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	30 96       	adiw	r30, 0x00	; 0
     db0:	21 05       	cpc	r18, r1
     db2:	31 05       	cpc	r19, r1
     db4:	a1 f1       	breq	.+104    	; 0xe1e <pow+0x76>
     db6:	61 15       	cp	r22, r1
     db8:	71 05       	cpc	r23, r1
     dba:	61 f4       	brne	.+24     	; 0xdd4 <pow+0x2c>
     dbc:	80 38       	cpi	r24, 0x80	; 128
     dbe:	bf e3       	ldi	r27, 0x3F	; 63
     dc0:	9b 07       	cpc	r25, r27
     dc2:	49 f1       	breq	.+82     	; 0xe16 <pow+0x6e>
     dc4:	68 94       	set
     dc6:	90 38       	cpi	r25, 0x80	; 128
     dc8:	81 05       	cpc	r24, r1
     dca:	61 f0       	breq	.+24     	; 0xde4 <pow+0x3c>
     dcc:	80 38       	cpi	r24, 0x80	; 128
     dce:	bf ef       	ldi	r27, 0xFF	; 255
     dd0:	9b 07       	cpc	r25, r27
     dd2:	41 f0       	breq	.+16     	; 0xde4 <pow+0x3c>
     dd4:	99 23       	and	r25, r25
     dd6:	4a f5       	brpl	.+82     	; 0xe2a <pow+0x82>
     dd8:	ff 3f       	cpi	r31, 0xFF	; 255
     dda:	e1 05       	cpc	r30, r1
     ddc:	31 05       	cpc	r19, r1
     dde:	21 05       	cpc	r18, r1
     de0:	19 f1       	breq	.+70     	; 0xe28 <pow+0x80>
     de2:	e8 94       	clt
     de4:	08 94       	sec
     de6:	e7 95       	ror	r30
     de8:	d9 01       	movw	r26, r18
     dea:	aa 23       	and	r26, r26
     dec:	29 f4       	brne	.+10     	; 0xdf8 <pow+0x50>
     dee:	ab 2f       	mov	r26, r27
     df0:	be 2f       	mov	r27, r30
     df2:	f8 5f       	subi	r31, 0xF8	; 248
     df4:	d0 f3       	brcs	.-12     	; 0xdea <pow+0x42>
     df6:	10 c0       	rjmp	.+32     	; 0xe18 <pow+0x70>
     df8:	ff 5f       	subi	r31, 0xFF	; 255
     dfa:	70 f4       	brcc	.+28     	; 0xe18 <pow+0x70>
     dfc:	a6 95       	lsr	r26
     dfe:	e0 f7       	brcc	.-8      	; 0xdf8 <pow+0x50>
     e00:	f7 39       	cpi	r31, 0x97	; 151
     e02:	50 f0       	brcs	.+20     	; 0xe18 <pow+0x70>
     e04:	19 f0       	breq	.+6      	; 0xe0c <pow+0x64>
     e06:	ff 3a       	cpi	r31, 0xAF	; 175
     e08:	38 f4       	brcc	.+14     	; 0xe18 <pow+0x70>
     e0a:	9f 77       	andi	r25, 0x7F	; 127
     e0c:	9f 93       	push	r25
     e0e:	0d d0       	rcall	.+26     	; 0xe2a <pow+0x82>
     e10:	0f 90       	pop	r0
     e12:	07 fc       	sbrc	r0, 7
     e14:	90 58       	subi	r25, 0x80	; 128
     e16:	08 95       	ret
     e18:	46 f0       	brts	.+16     	; 0xe2a <pow+0x82>
     e1a:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	80 e8       	ldi	r24, 0x80	; 128
     e24:	9f e3       	ldi	r25, 0x3F	; 63
     e26:	08 95       	ret
     e28:	4f e7       	ldi	r20, 0x7F	; 127
     e2a:	9f 77       	andi	r25, 0x7F	; 127
     e2c:	5f 93       	push	r21
     e2e:	4f 93       	push	r20
     e30:	3f 93       	push	r19
     e32:	2f 93       	push	r18
     e34:	0e 94 cf 07 	call	0xf9e	; 0xf9e <log>
     e38:	2f 91       	pop	r18
     e3a:	3f 91       	pop	r19
     e3c:	4f 91       	pop	r20
     e3e:	5f 91       	pop	r21
     e40:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     e44:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <exp>
     e48:	29 f4       	brne	.+10     	; 0xe54 <pow+0xac>
     e4a:	16 f0       	brts	.+4      	; 0xe50 <pow+0xa8>
     e4c:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     e50:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_zero>
     e54:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>

00000e58 <exp>:
     e58:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_splitA>
     e5c:	a8 f3       	brcs	.-22     	; 0xe48 <pow+0xa0>
     e5e:	96 38       	cpi	r25, 0x86	; 134
     e60:	a0 f7       	brcc	.-24     	; 0xe4a <pow+0xa2>
     e62:	07 f8       	bld	r0, 7
     e64:	0f 92       	push	r0
     e66:	e8 94       	clt
     e68:	2b e3       	ldi	r18, 0x3B	; 59
     e6a:	3a ea       	ldi	r19, 0xAA	; 170
     e6c:	48 eb       	ldi	r20, 0xB8	; 184
     e6e:	5f e7       	ldi	r21, 0x7F	; 127
     e70:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__mulsf3_pse>
     e74:	0f 92       	push	r0
     e76:	0f 92       	push	r0
     e78:	0f 92       	push	r0
     e7a:	4d b7       	in	r20, 0x3d	; 61
     e7c:	5e b7       	in	r21, 0x3e	; 62
     e7e:	0f 92       	push	r0
     e80:	0e 94 17 08 	call	0x102e	; 0x102e <modf>
     e84:	e0 e0       	ldi	r30, 0x00	; 0
     e86:	f1 e0       	ldi	r31, 0x01	; 1
     e88:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_powser>
     e8c:	4f 91       	pop	r20
     e8e:	5f 91       	pop	r21
     e90:	ef 91       	pop	r30
     e92:	ff 91       	pop	r31
     e94:	e5 95       	asr	r30
     e96:	ee 1f       	adc	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	49 f0       	breq	.+18     	; 0xeae <exp+0x56>
     e9c:	fe 57       	subi	r31, 0x7E	; 126
     e9e:	e0 68       	ori	r30, 0x80	; 128
     ea0:	44 27       	eor	r20, r20
     ea2:	ee 0f       	add	r30, r30
     ea4:	44 1f       	adc	r20, r20
     ea6:	fa 95       	dec	r31
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <exp+0x4a>
     eaa:	41 95       	neg	r20
     eac:	55 0b       	sbc	r21, r21
     eae:	0e 94 91 07 	call	0xf22	; 0xf22 <ldexp>
     eb2:	0f 90       	pop	r0
     eb4:	07 fe       	sbrs	r0, 7
     eb6:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <inverse>
     eba:	08 95       	ret

00000ebc <__fp_powser>:
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	1f 93       	push	r17
     ec2:	0f 93       	push	r16
     ec4:	ff 92       	push	r15
     ec6:	ef 92       	push	r14
     ec8:	df 92       	push	r13
     eca:	7b 01       	movw	r14, r22
     ecc:	8c 01       	movw	r16, r24
     ece:	68 94       	set
     ed0:	06 c0       	rjmp	.+12     	; 0xede <__fp_powser+0x22>
     ed2:	da 2e       	mov	r13, r26
     ed4:	ef 01       	movw	r28, r30
     ed6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__mulsf3x>
     eda:	fe 01       	movw	r30, r28
     edc:	e8 94       	clt
     ede:	a5 91       	lpm	r26, Z+
     ee0:	25 91       	lpm	r18, Z+
     ee2:	35 91       	lpm	r19, Z+
     ee4:	45 91       	lpm	r20, Z+
     ee6:	55 91       	lpm	r21, Z+
     ee8:	a6 f3       	brts	.-24     	; 0xed2 <__fp_powser+0x16>
     eea:	ef 01       	movw	r28, r30
     eec:	0e 94 ae 04 	call	0x95c	; 0x95c <__addsf3x>
     ef0:	fe 01       	movw	r30, r28
     ef2:	97 01       	movw	r18, r14
     ef4:	a8 01       	movw	r20, r16
     ef6:	da 94       	dec	r13
     ef8:	69 f7       	brne	.-38     	; 0xed4 <__fp_powser+0x18>
     efa:	df 90       	pop	r13
     efc:	ef 90       	pop	r14
     efe:	ff 90       	pop	r15
     f00:	0f 91       	pop	r16
     f02:	1f 91       	pop	r17
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <inverse>:
     f0a:	9b 01       	movw	r18, r22
     f0c:	ac 01       	movw	r20, r24
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	80 e8       	ldi	r24, 0x80	; 128
     f14:	9f e3       	ldi	r25, 0x3F	; 63
     f16:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__divsf3>
     f1a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     f1e:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_mpack>

00000f22 <ldexp>:
     f22:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_splitA>
     f26:	d8 f3       	brcs	.-10     	; 0xf1e <inverse+0x14>
     f28:	99 23       	and	r25, r25
     f2a:	c9 f3       	breq	.-14     	; 0xf1e <inverse+0x14>
     f2c:	94 0f       	add	r25, r20
     f2e:	51 1d       	adc	r21, r1
     f30:	a3 f3       	brvs	.-24     	; 0xf1a <inverse+0x10>
     f32:	91 50       	subi	r25, 0x01	; 1
     f34:	50 40       	sbci	r21, 0x00	; 0
     f36:	94 f0       	brlt	.+36     	; 0xf5c <ldexp+0x3a>
     f38:	59 f0       	breq	.+22     	; 0xf50 <ldexp+0x2e>
     f3a:	88 23       	and	r24, r24
     f3c:	32 f0       	brmi	.+12     	; 0xf4a <ldexp+0x28>
     f3e:	66 0f       	add	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	88 1f       	adc	r24, r24
     f44:	91 50       	subi	r25, 0x01	; 1
     f46:	50 40       	sbci	r21, 0x00	; 0
     f48:	c1 f7       	brne	.-16     	; 0xf3a <ldexp+0x18>
     f4a:	9e 3f       	cpi	r25, 0xFE	; 254
     f4c:	51 05       	cpc	r21, r1
     f4e:	2c f7       	brge	.-54     	; 0xf1a <inverse+0x10>
     f50:	88 0f       	add	r24, r24
     f52:	91 1d       	adc	r25, r1
     f54:	96 95       	lsr	r25
     f56:	87 95       	ror	r24
     f58:	97 f9       	bld	r25, 7
     f5a:	08 95       	ret
     f5c:	5f 3f       	cpi	r21, 0xFF	; 255
     f5e:	ac f0       	brlt	.+42     	; 0xf8a <ldexp+0x68>
     f60:	98 3e       	cpi	r25, 0xE8	; 232
     f62:	9c f0       	brlt	.+38     	; 0xf8a <ldexp+0x68>
     f64:	bb 27       	eor	r27, r27
     f66:	86 95       	lsr	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b7 95       	ror	r27
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <ldexp+0x50>
     f70:	b1 60       	ori	r27, 0x01	; 1
     f72:	93 95       	inc	r25
     f74:	c1 f7       	brne	.-16     	; 0xf66 <ldexp+0x44>
     f76:	bb 0f       	add	r27, r27
     f78:	58 f7       	brcc	.-42     	; 0xf50 <ldexp+0x2e>
     f7a:	11 f4       	brne	.+4      	; 0xf80 <ldexp+0x5e>
     f7c:	60 ff       	sbrs	r22, 0
     f7e:	e8 cf       	rjmp	.-48     	; 0xf50 <ldexp+0x2e>
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	8f 4f       	sbci	r24, 0xFF	; 255
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	e3 cf       	rjmp	.-58     	; 0xf50 <ldexp+0x2e>
     f8a:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     f8e:	16 f0       	brts	.+4      	; 0xf94 <ldexp+0x72>
     f90:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_mpack>
     f94:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
     f98:	68 94       	set
     f9a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>

00000f9e <log>:
     f9e:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_splitA>
     fa2:	a8 f3       	brcs	.-22     	; 0xf8e <ldexp+0x6c>
     fa4:	99 23       	and	r25, r25
     fa6:	c1 f3       	breq	.-16     	; 0xf98 <ldexp+0x76>
     fa8:	ae f3       	brts	.-22     	; 0xf94 <ldexp+0x72>
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	1f 93       	push	r17
     fb0:	0f 93       	push	r16
     fb2:	ff 92       	push	r15
     fb4:	c9 2f       	mov	r28, r25
     fb6:	dd 27       	eor	r29, r29
     fb8:	88 23       	and	r24, r24
     fba:	2a f0       	brmi	.+10     	; 0xfc6 <log+0x28>
     fbc:	21 97       	sbiw	r28, 0x01	; 1
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	da f7       	brpl	.-10     	; 0xfbc <log+0x1e>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e8       	ldi	r20, 0x80	; 128
     fcc:	5f eb       	ldi	r21, 0xBF	; 191
     fce:	9f e3       	ldi	r25, 0x3F	; 63
     fd0:	88 39       	cpi	r24, 0x98	; 152
     fd2:	20 f0       	brcs	.+8      	; 0xfdc <log+0x3e>
     fd4:	80 3e       	cpi	r24, 0xE0	; 224
     fd6:	38 f0       	brcs	.+14     	; 0xfe6 <log+0x48>
     fd8:	21 96       	adiw	r28, 0x01	; 1
     fda:	8f 77       	andi	r24, 0x7F	; 127
     fdc:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     fe0:	e8 e2       	ldi	r30, 0x28	; 40
     fe2:	f1 e0       	ldi	r31, 0x01	; 1
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <log+0x50>
     fe6:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     fea:	e5 e5       	ldi	r30, 0x55	; 85
     fec:	f1 e0       	ldi	r31, 0x01	; 1
     fee:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_powser>
     ff2:	8b 01       	movw	r16, r22
     ff4:	be 01       	movw	r22, r28
     ff6:	ec 01       	movw	r28, r24
     ff8:	fb 2e       	mov	r15, r27
     ffa:	6f 57       	subi	r22, 0x7F	; 127
     ffc:	71 09       	sbc	r23, r1
     ffe:	75 95       	asr	r23
    1000:	77 1f       	adc	r23, r23
    1002:	88 0b       	sbc	r24, r24
    1004:	99 0b       	sbc	r25, r25
    1006:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
    100a:	28 e1       	ldi	r18, 0x18	; 24
    100c:	32 e7       	ldi	r19, 0x72	; 114
    100e:	41 e3       	ldi	r20, 0x31	; 49
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__mulsf3x>
    1016:	af 2d       	mov	r26, r15
    1018:	98 01       	movw	r18, r16
    101a:	ae 01       	movw	r20, r28
    101c:	ff 90       	pop	r15
    101e:	0f 91       	pop	r16
    1020:	1f 91       	pop	r17
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	0e 94 ae 04 	call	0x95c	; 0x95c <__addsf3x>
    102a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_round>

0000102e <modf>:
    102e:	fa 01       	movw	r30, r20
    1030:	dc 01       	movw	r26, r24
    1032:	aa 0f       	add	r26, r26
    1034:	bb 1f       	adc	r27, r27
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	bf 57       	subi	r27, 0x7F	; 127
    103c:	28 f4       	brcc	.+10     	; 0x1048 <modf+0x1a>
    103e:	22 27       	eor	r18, r18
    1040:	33 27       	eor	r19, r19
    1042:	44 27       	eor	r20, r20
    1044:	50 78       	andi	r21, 0x80	; 128
    1046:	20 c0       	rjmp	.+64     	; 0x1088 <modf+0x5a>
    1048:	b7 51       	subi	r27, 0x17	; 23
    104a:	90 f4       	brcc	.+36     	; 0x1070 <modf+0x42>
    104c:	ab 2f       	mov	r26, r27
    104e:	00 24       	eor	r0, r0
    1050:	46 95       	lsr	r20
    1052:	37 95       	ror	r19
    1054:	27 95       	ror	r18
    1056:	01 1c       	adc	r0, r1
    1058:	a3 95       	inc	r26
    105a:	d2 f3       	brmi	.-12     	; 0x1050 <modf+0x22>
    105c:	00 20       	and	r0, r0
    105e:	71 f0       	breq	.+28     	; 0x107c <modf+0x4e>
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	44 1f       	adc	r20, r20
    1066:	b3 95       	inc	r27
    1068:	da f3       	brmi	.-10     	; 0x1060 <modf+0x32>
    106a:	0e d0       	rcall	.+28     	; 0x1088 <modf+0x5a>
    106c:	0c 94 96 04 	jmp	0x92c	; 0x92c <__subsf3>
    1070:	61 30       	cpi	r22, 0x01	; 1
    1072:	71 05       	cpc	r23, r1
    1074:	a0 e8       	ldi	r26, 0x80	; 128
    1076:	8a 07       	cpc	r24, r26
    1078:	b9 46       	sbci	r27, 0x69	; 105
    107a:	30 f4       	brcc	.+12     	; 0x1088 <modf+0x5a>
    107c:	9b 01       	movw	r18, r22
    107e:	ac 01       	movw	r20, r24
    1080:	66 27       	eor	r22, r22
    1082:	77 27       	eor	r23, r23
    1084:	88 27       	eor	r24, r24
    1086:	90 78       	andi	r25, 0x80	; 128
    1088:	30 96       	adiw	r30, 0x00	; 0
    108a:	21 f0       	breq	.+8      	; 0x1094 <modf+0x66>
    108c:	20 83       	st	Z, r18
    108e:	31 83       	std	Z+1, r19	; 0x01
    1090:	42 83       	std	Z+2, r20	; 0x02
    1092:	53 83       	std	Z+3, r21	; 0x03
    1094:	08 95       	ret

00001096 <__fp_mpack>:
    1096:	9f 3f       	cpi	r25, 0xFF	; 255
    1098:	31 f0       	breq	.+12     	; 0x10a6 <__fp_mpack_finite+0xc>

0000109a <__fp_mpack_finite>:
    109a:	91 50       	subi	r25, 0x01	; 1
    109c:	20 f4       	brcc	.+8      	; 0x10a6 <__fp_mpack_finite+0xc>
    109e:	87 95       	ror	r24
    10a0:	77 95       	ror	r23
    10a2:	67 95       	ror	r22
    10a4:	b7 95       	ror	r27
    10a6:	88 0f       	add	r24, r24
    10a8:	91 1d       	adc	r25, r1
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	97 f9       	bld	r25, 7
    10b0:	08 95       	ret

000010b2 <__divmodsi4>:
    10b2:	05 2e       	mov	r0, r21
    10b4:	97 fb       	bst	r25, 7
    10b6:	1e f4       	brtc	.+6      	; 0x10be <__divmodsi4+0xc>
    10b8:	00 94       	com	r0
    10ba:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__negsi2>
    10be:	57 fd       	sbrc	r21, 7
    10c0:	07 d0       	rcall	.+14     	; 0x10d0 <__divmodsi4_neg2>
    10c2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__udivmodsi4>
    10c6:	07 fc       	sbrc	r0, 7
    10c8:	03 d0       	rcall	.+6      	; 0x10d0 <__divmodsi4_neg2>
    10ca:	4e f4       	brtc	.+18     	; 0x10de <__divmodsi4_exit>
    10cc:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__negsi2>

000010d0 <__divmodsi4_neg2>:
    10d0:	50 95       	com	r21
    10d2:	40 95       	com	r20
    10d4:	30 95       	com	r19
    10d6:	21 95       	neg	r18
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	4f 4f       	sbci	r20, 0xFF	; 255
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255

000010de <__divmodsi4_exit>:
    10de:	08 95       	ret

000010e0 <__negsi2>:
    10e0:	90 95       	com	r25
    10e2:	80 95       	com	r24
    10e4:	70 95       	com	r23
    10e6:	61 95       	neg	r22
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	8f 4f       	sbci	r24, 0xFF	; 255
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	08 95       	ret

000010f0 <__udivmodsi4>:
    10f0:	a1 e2       	ldi	r26, 0x21	; 33
    10f2:	1a 2e       	mov	r1, r26
    10f4:	aa 1b       	sub	r26, r26
    10f6:	bb 1b       	sub	r27, r27
    10f8:	fd 01       	movw	r30, r26
    10fa:	0d c0       	rjmp	.+26     	; 0x1116 <__udivmodsi4_ep>

000010fc <__udivmodsi4_loop>:
    10fc:	aa 1f       	adc	r26, r26
    10fe:	bb 1f       	adc	r27, r27
    1100:	ee 1f       	adc	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	a2 17       	cp	r26, r18
    1106:	b3 07       	cpc	r27, r19
    1108:	e4 07       	cpc	r30, r20
    110a:	f5 07       	cpc	r31, r21
    110c:	20 f0       	brcs	.+8      	; 0x1116 <__udivmodsi4_ep>
    110e:	a2 1b       	sub	r26, r18
    1110:	b3 0b       	sbc	r27, r19
    1112:	e4 0b       	sbc	r30, r20
    1114:	f5 0b       	sbc	r31, r21

00001116 <__udivmodsi4_ep>:
    1116:	66 1f       	adc	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	1a 94       	dec	r1
    1120:	69 f7       	brne	.-38     	; 0x10fc <__udivmodsi4_loop>
    1122:	60 95       	com	r22
    1124:	70 95       	com	r23
    1126:	80 95       	com	r24
    1128:	90 95       	com	r25
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	bd 01       	movw	r22, r26
    1130:	cf 01       	movw	r24, r30
    1132:	08 95       	ret

00001134 <_exit>:
    1134:	f8 94       	cli

00001136 <__stop_program>:
    1136:	ff cf       	rjmp	.-2      	; 0x1136 <__stop_program>
